{"version":3,"sources":["constants.js","App.js","index.js","App.module.css"],"names":["config","url","App","useEffect","updateSongList","useState","songQueue","setSongQueue","drawerVisible","setDrawerVisible","loading","setLoading","Form","useForm","form","fetch","then","res","json","body","spinning","className","styles","container","title","placement","onClose","visible","width","window","innerWidth","onFinish","values","tzoffset","Date","getTimezoneOffset","localISOTime","now","toISOString","slice","requestedAt","method","headers","Accept","JSON","stringify","resetFields","labelCol","span","wrapperCol","Item","label","name","rules","required","message","offset","type","htmlType","innerContainer","buttonHeader","onClick","style","height","fontSize","listContainer","itemLayout","dataSource","bordered","renderItem","item","Meta","avatar","src","songName","description","requester","date","toLocaleTimeString","ReactDOM","render","StrictMode","document","getElementById","module","exports"],"mappings":"yLAMaA,EANA,CACXC,IAAK,I,wFC8HQC,MA1Hf,WACEC,qBAAU,WACRC,MACC,IAEH,MAAkCC,mBAAS,IAA3C,mBAAOC,EAAP,KAAkBC,EAAlB,KACA,EAA0CF,oBAAS,GAAnD,mBAAOG,EAAP,KAAsBC,EAAtB,KACA,EAA8BJ,oBAAS,GAAvC,mBAAOK,EAAP,KAAgBC,EAAhB,KACA,EAAeC,IAAKC,UAAbC,EAAP,oBAEA,SAASV,IACPO,GAAW,GACXI,MAAMf,EAAOC,IAAM,YAChBe,MAAK,SAACC,GAAD,OAASA,EAAIC,UAClBF,MAAK,SAACG,GACLZ,EAAaY,GACbR,GAAW,MAgCjB,OACE,cAAC,IAAD,CAAMS,SAAUV,EAAhB,SACE,sBAAKW,UAAWC,IAAOC,UAAvB,UACE,cAAC,IAAD,CACEC,MAAM,kBACNC,UAAU,QACVC,QA7BR,WACEjB,GAAiB,IA6BXkB,QAASnB,EACToB,MAAOC,OAAOC,WAAa,IAAM,IAAMD,OAAOC,WAAa,IAL7D,SAOE,eAAC,IAAD,CACEhB,KAAMA,EACNiB,SA/BV,SAAkBC,GAChBrB,GAAW,GACX,IAAIsB,EAA8C,KAAlC,IAAIC,MAAQC,oBACxBC,EAAgB,IAAIF,KAAKA,KAAKG,MAAQJ,GAAWK,cAAcC,MAAM,GAAI,GAC7EP,EAAOQ,YAAcJ,EACrBrB,MAAMf,EAAOC,IAAM,WAAY,CAC7BwC,OAAQ,OACRC,QAAS,CACPC,OAAQ,mBACR,eAAgB,oBAElBxB,KAAMyB,KAAKC,UAAUb,KACpBhB,MAAK,WACNZ,IACAU,EAAKgC,cACLrC,GAAiB,OAiBXsC,SAAU,CAAEC,KAAM,GAClBC,WAAY,CAAED,KAAM,IAJtB,UAME,cAAC,IAAKE,KAAN,CACEC,MAAM,oBACNC,KAAK,WACLC,MAAO,CACL,CAAEC,UAAU,EAAMC,QAAS,qCAJ/B,SAOE,cAAC,IAAD,MAEF,cAAC,IAAKL,KAAN,CACEC,MAAM,WACNC,KAAK,YACLC,MAAO,CAAC,CAAEC,UAAU,EAAMC,QAAS,sBAHrC,SAKE,cAAC,IAAD,MAEF,cAAC,IAAKL,KAAN,CAAWD,WAAY,CAAEO,OAAQ,EAAGR,KAAM,IAA1C,SACE,cAAC,IAAD,CAAQS,KAAK,UAAUC,SAAS,SAAhC,2BAMN,sBAAKrC,UAAWC,IAAOqC,eAAvB,UACE,qBAAKtC,UAAWC,IAAOsC,aAAvB,SACE,cAAC,IAAD,CACEH,KAAK,UACLI,QAAS,kBAAMpD,GAAiB,IAChCqD,MAAO,CAAElC,MAAO,OAAQmC,OAAQ,OAAQC,SAAU,QAHpD,+BAQF,qBAAK3C,UAAWC,IAAO2C,cAAvB,SACE,cAAC,IAAD,CACEC,WAAW,aACXC,WAAY7D,EACZ8D,UAAQ,EACRC,WAAY,SAACC,GAAD,OACV,eAAC,IAAKpB,KAAN,WACE,cAAC,IAAKA,KAAKqB,KAAX,CACEC,OACE,cAAC,IAAD,CAAQC,IAAI,yEAEdjD,MAAO8C,EAAKI,SACZC,YAAaL,EAAKM,YAEpB,+BA3FWC,EA2FaP,EAAK9B,YA1F1B,IAAIN,KAAK2C,GAAMC,2BADlC,IAA2BD,gBCpB7BE,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,U,mBCR1BC,EAAOC,QAAU,CAAC,UAAY,uBAAuB,aAAe,0BAA0B,cAAgB,2BAA2B,eAAiB,+B","file":"static/js/main.d622aaaf.chunk.js","sourcesContent":["const prod = {\n  url: \"\",\n};\nconst dev = {\n  url: \"http://localhost:8080\",\n};\nexport const config = process.env.NODE_ENV === \"development\" ? dev : prod;\n","import { config } from \"./constants\";\nimport React, { useState, useEffect } from \"react\";\nimport { List, Avatar, Drawer, Button, Form, Input, Spin } from \"antd\";\nimport styles from \"./App.module.css\";\n\nfunction App() {\n  useEffect(() => {\n    updateSongList();\n  }, []);\n\n  const [songQueue, setSongQueue] = useState([]);\n  const [drawerVisible, setDrawerVisible] = useState(false);\n  const [loading, setLoading] = useState(false);\n  const [form] = Form.useForm();\n\n  function updateSongList() {\n    setLoading(true);\n    fetch(config.url + \"/karaoke\")\n      .then((res) => res.json())\n      .then((body) => {\n        setSongQueue(body);\n        setLoading(false);\n      });\n  }\n\n  function resolveDateString(date) {\n    let timeString = new Date(date).toLocaleTimeString();\n    return timeString;\n  }\n\n  function onDrawerClose() {\n    setDrawerVisible(false);\n  }\n\n  function onFinish(values) {\n    setLoading(true);\n    var tzoffset = (new Date()).getTimezoneOffset() * 60000; \n    var localISOTime = (new Date(Date.now() - tzoffset)).toISOString().slice(0, -1);\n    values.requestedAt = localISOTime;\n    fetch(config.url + \"/karaoke\", {\n      method: \"POST\",\n      headers: {\n        Accept: \"application/json\",\n        \"Content-Type\": \"application/json\",\n      },\n      body: JSON.stringify(values),\n    }).then(() => {\n      updateSongList();\n      form.resetFields();\n      setDrawerVisible(false);\n    });\n  }\n\n  return (\n    <Spin spinning={loading}>\n      <div className={styles.container}>\n        <Drawer\n          title=\"Pedir música\"\n          placement=\"right\"\n          onClose={onDrawerClose}\n          visible={drawerVisible}\n          width={window.innerWidth > 900 ? 500 : window.innerWidth - 100}\n        >\n          <Form\n            form={form}\n            onFinish={onFinish}\n            labelCol={{ span: 8 }}\n            wrapperCol={{ span: 16 }}\n          >\n            <Form.Item\n              label=\"Nome da música\"\n              name=\"songName\"\n              rules={[\n                { required: true, message: \"Informe o nome de uma música!\" },\n              ]}\n            >\n              <Input />\n            </Form.Item>\n            <Form.Item\n              label=\"Seu nome\"\n              name=\"requester\"\n              rules={[{ required: true, message: \"Informe seu nome!\" }]}\n            >\n              <Input />\n            </Form.Item>\n            <Form.Item wrapperCol={{ offset: 8, span: 16 }}>\n              <Button type=\"primary\" htmlType=\"submit\">\n                Enviar\n              </Button>\n            </Form.Item>\n          </Form>\n        </Drawer>\n        <div className={styles.innerContainer}>\n          <div className={styles.buttonHeader}>\n            <Button\n              type=\"primary\"\n              onClick={() => setDrawerVisible(true)}\n              style={{ width: \"100%\", height: \"50px\", fontSize: \"16px\" }}\n            >\n              Pedir música\n            </Button>\n          </div>\n          <div className={styles.listContainer}>\n            <List\n              itemLayout=\"horizontal\"\n              dataSource={songQueue}\n              bordered\n              renderItem={(item) => (\n                <List.Item>\n                  <List.Item.Meta\n                    avatar={\n                      <Avatar src=\"https://cdn0.iconfinder.com/data/icons/audio-vol-1b/100/1-41-512.png\" />\n                    }\n                    title={item.songName}\n                    description={item.requester}\n                  />\n                  <div>{resolveDateString(item.requestedAt)}</div>\n                </List.Item>\n              )}\n            />\n          </div>\n        </div>\n      </div>\n    </Spin>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"App_container__1MQN3\",\"buttonHeader\":\"App_buttonHeader__1pA6f\",\"listContainer\":\"App_listContainer__PLarv\",\"innerContainer\":\"App_innerContainer__2Zgrr\"};"],"sourceRoot":""}